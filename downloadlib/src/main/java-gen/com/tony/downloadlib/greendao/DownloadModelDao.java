package com.tony.downloadlib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tony.downloadlib.model.DownloadModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_MODEL".
*/
public class DownloadModelDao extends AbstractDao<DownloadModel, String> {

    public static final String TABLENAME = "DOWNLOAD_MODEL";

    /**
     * Properties of entity DownloadModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property DownloadState = new Property(2, long.class, "downloadState", false, "DOWNLOAD_STATE");
        public final static Property TotalSize = new Property(3, long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property DownloadSize = new Property(4, long.class, "downloadSize", false, "DOWNLOAD_SIZE");
        public final static Property DownloadPath = new Property(5, String.class, "downloadPath", false, "DOWNLOAD_PATH");
    };


    public DownloadModelDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_MODEL\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"FILE_NAME\" TEXT," + // 1: fileName
                "\"DOWNLOAD_STATE\" INTEGER NOT NULL ," + // 2: downloadState
                "\"TOTAL_SIZE\" INTEGER NOT NULL ," + // 3: totalSize
                "\"DOWNLOAD_SIZE\" INTEGER NOT NULL ," + // 4: downloadSize
                "\"DOWNLOAD_PATH\" TEXT);"); // 5: downloadPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadModel entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
        stmt.bindLong(3, entity.getDownloadState());
        stmt.bindLong(4, entity.getTotalSize());
        stmt.bindLong(5, entity.getDownloadSize());
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(6, downloadPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadModel entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
        stmt.bindLong(3, entity.getDownloadState());
        stmt.bindLong(4, entity.getTotalSize());
        stmt.bindLong(5, entity.getDownloadSize());
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(6, downloadPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DownloadModel readEntity(Cursor cursor, int offset) {
        DownloadModel entity = new DownloadModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.getLong(offset + 2), // downloadState
            cursor.getLong(offset + 3), // totalSize
            cursor.getLong(offset + 4), // downloadSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // downloadPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadModel entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadState(cursor.getLong(offset + 2));
        entity.setTotalSize(cursor.getLong(offset + 3));
        entity.setDownloadSize(cursor.getLong(offset + 4));
        entity.setDownloadPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DownloadModel entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(DownloadModel entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
